import io
import os
import tempfile

import pytest

from prepare_boltz_input_nyl12 import parse_contig, read_fasta_chains, chain_to_list, \
    list_to_chain, calculate_modified_chain, get_modified_chains_from_fasta_file, \
    update_base_chain_from_partial


@pytest.mark.parametrize(
    "contig,expected",
    [
        ("A1-2,3-4", {"A": [((3, 5), (3, 6))]}),
        ("B1-5,B286-292,8-8,B301-308", {"B": [((293, 300), (13, 20))]}),
        ("A1-2,3-4,B1-5,B286-292,8-8,B301-308", {"A": [((3, 5), (3, 6))], "B": [((293, 300), (13, 20))]}),
        ("C1-5", {"C": []}),
        ("A1-5,A18-114,7-7,A122-150,14-14,A165-221,A233-328",
         {"A": [((115, 121), (103, 109)), ((151, 164), (139, 152))]}),
        (
                "A1-5,A18-114,7-7,A122-150,14-14,A165-221,A233-328,B1-5,B286-292,8-8,B301-308,C1-5,D1-5,D29-35,5-5,D41-95,9-9,D105-110",
                {"A": [((115, 121), (103, 109)), ((151, 164), (139, 152))],
                 "B": [((293, 300), (13, 20))],
                 "C": [],
                 "D": [((36, 40), (13, 17)), ((96, 104), (73, 81))]})
    ]
)
def test_parse_contig_cases(contig, expected):
    result = parse_contig(contig)
    assert result == expected


ligand_data = """
>nyl12_jmp_diff_0, T=0.1, seed=78293, num_res=43, num_ligand_res=20, use_ligand_context=True, ligand_cutoff_distance=8.0, batch_size=1, number_of_batches=5, model_path=/data/jpc/code/heme_binder_diffusion/lib/LigandMPNN/model_params/ligandmpnn_v_32_010_25.pt
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAASSASSSAKFIYLGMMAASSMAASSTGITLFYSESASQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTLSSSGSSSSPLISGA
>nyl12_jmp_diff_0, id=1, T=0.1, seed=78293, overall_confidence=0.3468, ligand_confidence=0.2510, seq_rec=0.2558
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDRRAGAKRIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWALTGYRSPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAKDRMWISAKFIYLGMMAASSMAASSTGITLFYSDEGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMQSIGPAAGPLISGA
>nyl12_jmp_diff_0, id=2, T=0.1, seed=78293, overall_confidence=0.3489, ligand_confidence=0.2378, seq_rec=0.2558
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSRAGSKRIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWYLTGHRSPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAKDRMNISAKFIYLGMMAASSMAASSTGITLFYSPEGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMQTEGPDTGPLISGA
>nyl12_jmp_diff_0, id=3, T=0.1, seed=78293, overall_confidence=0.3503, ligand_confidence=0.2485, seq_rec=0.2326
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDPRAGSKRIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWKLTGHRDPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAADRVTISAKFIYLGMMAASSMAASSTGITLFYSDEGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMRTGGPDRGPLISGA
>nyl12_jmp_diff_0, id=4, T=0.1, seed=78293, overall_confidence=0.3643, ligand_confidence=0.2688, seq_rec=0.2326
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDRREGAKDIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWKLTGYRSPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAADRMRISAKFIYLGMMAASSMAASSTGITLFYSSTGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMKTGGPDIGPLISGA
>nyl12_jmp_diff_0, id=5, T=0.1, seed=78293, overall_confidence=0.3560, ligand_confidence=0.2549, seq_rec=0.2093
MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDRREGDKDIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWKLTGHRDPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAADRVNISAKFIYLGMMAASSMAASSTGITLFYSPTGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMKTKGPDTGPLISGA
"""

ligand_record = {
    "name": "nyl12_jmp_diff_0",
    "id": "1",
    "T": "0.1",
    "seed": "78293",
    "overall_confidence": "0.3468",
    "ligand_confidence": "0.2510",
    "seq_rec": "0.2558",
    "merged_partial_chain": "MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDRRAGAKRIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWALTGYRSPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAKDRMWISAKFIYLGMMAASSMAASSTGITLFYSDEGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMQSIGPAAGPLISGA"
}


def test_read_fasta_chain():
    with tempfile.NamedTemporaryFile("w+", delete=False) as tmp:
        tmp.write(ligand_data)
        tmp.flush()
    try:
        seq = read_fasta_chains(tmp.name)
        assert len(seq) == 5
        assert seq[0] == ligand_record
    finally:
        os.remove(tmp.name)


base_chain = "MAASSTDNILHFDFPEVQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDYTPRQNMIYPDKALGQKAFAALSAGQFVQGRHGAGVSASVGKLLRDGFQLAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQPKKPFWPEPKNTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRP"
contig_str = "A1-5,A18-114,7-7,A122-150,14-14,A165-221,A233-328,B1-5,B286-292,8-8,B301-308,C1-5,D1-5,D29-35,5-5,D41-95,9-9,D105-110"

first_seq = "MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRP"
first_updated_chain = "MAASSTDNILHFDFPEVQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQPKKPFWPEPKNTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRP"

second_seq = "MAASSSDLYAPGAASSASSSAKFIYLGM"
second_updated_chain = "MAASSTDNILHFDFPEVQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQPKKPFWPEPKNTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGAASSASSSAKFIYLGMVAGELAKQAVWSAVGYSHRP"


def test_update_chain():
    contig_dict = parse_contig(contig_str)
    sl = chain_to_list(base_chain)
    update_base_chain_from_partial(sl, first_seq, contig_dict["A"])
    res = list_to_chain(sl)
    assert res == first_updated_chain
    update_base_chain_from_partial(sl, second_seq, contig_dict["B"])
    res = list_to_chain(sl)
    assert res == second_updated_chain


updated_chain = "MAASSTDNILHFDFPEVQIGTAINPEGPTGITLFYSESASQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTLSSSGSSSSPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQPKKPFWPEPKNTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGAASSASSSAKFIYLGMVAGELAKQAVWSAVGYSHRP"


@pytest.mark.parametrize(
    "ligand_chain,updated_chain",
    [
        (
                "MAASSQIGTAINPEGPTGITLFYFPKGVQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTKNEVQFRRMPLISGAVIFDSGGGSSGIYPDKALGQKAFAALSAGQFVQGRHGAGVSASAGAASSGSASAAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQTTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGADIESDLNAKFIYLGMVAGELAKQAVWSAVGYSHRPMAASSSDLYAPGAASSASSSAKFIYLGMMAASSMAASSTGITLFYSESASQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTLSSSGSSSSPLISGA",
                updated_chain),
    ]
)
def test_calculate_modified_chain(ligand_chain, updated_chain):
    contig_dict = parse_contig(contig_str)
    res = calculate_modified_chain(base_chain, ligand_chain, "MAASS", contig_dict)
    assert res == updated_chain


modified_alpha = "MAASSTDNILHFDFPEVQIGTAINPEGPTGITLFYSDEGIQASVDIQGGSVGTFFTQEKMQQGEAYLDGVAFTGGGILGLEAVAGAVSSLFADQTMQSIGPAAGPLISGAVIFDRRAGAKRIYPDKALGQKAFAALSAGQFVQGRHGAGVNAYVGWALTGYRSPAGQGGAFAQIGKTKIAVFTVVNAVGVILDEKGEVIYGLPKGATKQTLNQQVTELLQQPKKPFWPEPKN"
modified_beta = "TTLTIVITNEKLAPRHLKQLGRQVHHALSQVIHPYATILDGDVLYTVSTRSIESDLYAPGAKDRMWISAKFIYLGMVAGELAKQAVWSAVGYSHRP"


def test_process_fasta_file():
    fd = io.StringIO(ligand_data)
    contig_dict = parse_contig(contig_str)
    res = get_modified_chains_from_fasta_file(fd, base_chain, "MAASS", "TTLTIVIT", contig_dict)
    assert len(res) == 5
    assert res[0]["modified_alpha"] == modified_alpha
    assert res[0]["modified_beta"] == modified_beta
